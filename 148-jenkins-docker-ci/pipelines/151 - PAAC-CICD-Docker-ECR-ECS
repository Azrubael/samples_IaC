pipeline {
  agent any
  environment {
    registryCredential = 'ecr:us-east-1:awscreds'
    appRegistry = "427443251551.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg"
    vprofileRegistry = "https://427443251551.dkr.ecr.us-east-1.amazonaws.com"
    JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64/"
    cluster = "vprofile"
    service = "vprofileappsvc"
  }

  stages {
    stage('Fetch code'){
      steps {
        git branch: 'main', url: 'https://github.com/Azrubael/230903-javacode'
      }
    }

    stage('Test'){
      steps {
        sh 'mvn test'
      }
    }

    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
      steps {
        sh 'mvn checkstyle:checkstyle'
      }
      post {
        success {
          echo 'Generated Analysis Result'
        }
      }
    }

    stage('build && SonarQube analysis') {
      environment {
        scannerHome = tool 'sonar4.7'
      }
      steps {
        withSonarQubeEnv('sonar') {
          sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
            -Dsonar.projectName=vprofile-repo \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=src/ \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
        }
      }
    }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

    stage('Build App Image') {
      steps {
        script {
          dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
        }
      }
    }

    stage('Upload App Image') {
      steps{
        script {
          docker.withRegistry( vprofileRegistry, registryCredential ) {
            dockerImage.push("$BUILD_NUMBER")
            dockerImage.push('latest')
          }
        }
      }
    }
     
    stage('Deploy to ecs') {
      steps {
        withAWS(credentials: 'awscreds', region: 'us-east-1') {
          //Here we'll create a new container, a new task
          //in the service with the latest image. Also it will remove 
          //the old container which is running with the old image tag.
          sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
        }
      }
    }

  }
}